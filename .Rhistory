ggsci_db:::ggsci_db
ggsci:::ggsci_db
re <- ggsci:::ggsci_db
View(re)
paletteer::palettes_dynamic
paletteer::palettes_d_names
paletteer::palettes_c_names
paletteer::palettes_d
my_packages <- c("tidyverse", "data.table", "readxl")
pacman::p_load(char = my_packages)
tmp <- list()
my_packages <- c("tidyverse", "data.table", "readxl")
pacman::p_load(char = my_packages)
tmp <- list()
colorDf <- read_xlsx("../Meterial/SinoColor.xlsx", sheet = 1)
View(colorDf)
colorDf <- read_xlsx("../Meterial/SinoColor.xlsx", sheet = 1, col_names = F)
View(colorDf)
my_packages <- c("tidyverse", "data.table", "readxl")
pacman::p_load(char = my_packages)
tmp <- list()
my_packages <- c("tidyverse", "data.table", "readxl")
pacman::p_load(char = my_packages)
tmp <- list()
colorDf <- read_xlsx("../Meterial/SinoColor.xlsx", sheet = 1, col_names = F)
View(colorDf)
jsonData <- fromJSON(file ="../Meterial/Traditional-Chinese-Colors-in.json")
my_packages <- c("tidyverse", "data.table", "readxl",
"rjson")
pacman::p_load(char = my_packages)
jsonData <- fromJSON(file ="../Meterial/Traditional-Chinese-Colors-in.json")
View(jsonData)
color_df <- as.data.frame(jsonData)
color_df <- lapply(jsonData, function(x){
x[1:3]
})
View(color_df)
color_df <- lapply(jsonData, function(x){
x[3:5]
})
color_df <- as.data.frame(color_df)
View(colorDf)
View(color_df)
color_df <- lapply(jsonData, function(x){
x[3:5]
})
color_df <- as.data.frame(matrix(unlist(color_df), nrow = 3))
View(color_df)
color_df <- lapply(jsonData, function(x){
x[3:5]
})
color_df <- as.data.frame(matrix(unlist(color_df), ncol = 3))
View(color_df)
color_df <- sapply(jsonData, function(x){
x[3:5]
})
View(color_df)
color_df <- as.data.frame(t(color_df))
View(color_df)
jsonData <- fromJSON(file ="../Meterial/all_in_one.json")
View(colorDf)
View(jsonData)
color_list <- jsonData$data
View(color_list)
color_list <- unlist(color_list, recursive = F)
View(color_list)
color_list[["red1"]][["rgb"]]
paste0(color_list[["red1"]][["rgb"]])
paste0(color_list[["red1"]][["rgb"]], collapse = ",")
paste0(color_list[["red1"]][["rgb"]], collapse = ",")
color_list[[1]]
length(color_list[[1]])
color_list2 <- lapply(color_list, function(x){
x$rgb <- paste0(x$rgb, collapse = ", ")
x$cmyk <- paste0(x$cmyk, collapse = ", ")
x
})
View(color_list2)
color_df <- do.call(rbind, color_list2)
View(color_df)
paletteer::palettes_d("")
paletteer::palettes_d
ggsci::pal_aaas()
ggsci::pal_aaas(alpha = 3)
ggsci::pal_aaas(alpha = 0.5)
color_list <- color_list <- jsonData$data
View(color_list)
color_list[["red"]][[1]][["hex"]]
color_df <- as.data.frame(color_df)
table(color_df$color_series)
View(color_df)
color_df$color_series
color_df$id
View(color_df)
View(color_df)
class(color_df)
class(color_df$name)
View(color_list2)
View(color_list2)
unlist(color_list2)
sapply(color_list2, as.vector)
rr <- sapply(color_list2, as.vector)
View(rr)
color_list2 <- lapply(color_list2, unlist)
View(color_list2)
color_list2[["red1"]]
color_df <- do.call(rbind, color_list2)
color_df <- as.data.frame(color_df)
View(color_df)
table(color_df$color_series)
save(color_df, file = "../Data/color_df.Rda")
pal_npg("nrc")(10)
library(ggsci)
pal_npg("nrc")(10)
pal_npg("nrc")
pal_npg("nrc")(10)
paletteer::paletteer_d("ggsci::nrc")
paletteer::paletteer_c("ggsci::nrc")
paletteer::palettes_d_names
rr <- paletteer::palettes_d_names
View(rr)
paletteer::paletteer_c("ggsci::nrc_npg")
paletteer::paletteer_d("ggsci::nrc_npg")
paletteer::paletteer_d
pal_npg()(10)
prismatic::color(pal_npg()(10))
prismatic::color(sample(color_df[color_df$color_series %in% "red",], 4))
prismatic::color(sample(color_df[color_df$color_series %in% "red",]$hex, 4))
my_packages <- c("tidyverse", "data.table", "readxl",
"rjson")
pacman::p_load(char = my_packages)
tmp <- list()
usethis::use_package("prismatic")
?usethis::use_data
load(file = "../Data/color_df.Rda")
dir()
load("Data/color_df.Rda")
use_data(color_df)
use_this::use_data(color_df)
usethis::use_data(color_df)
usethis::use_data(color_df, overwrite = T)
usethis::use_package("ggplot2")
library(prismatic)
prismatic::color(alpha_cols)
color_list <- split(color_df$color_series)
color_list <- split(color_df, color_df$color_series)
View(color_list)
View(color_list)
x = color_list[[1]]
View(x)
# x = color_list[[1]]
cols <- x$hex
names(cols) <- x$pinyin
cols
names(cols) <- x$name
View(color_df)
names(cols) <- x$tra_name
color_list <- lapply(color_list, function(x){
# x = color_list[[1]]
cols <- x$hex
names(cols) <- x$tra_name
cols
})
View(color_list)
color_list[["black"]]
# Different types of Chinese Color palettes grouped by basic colors.
pal_ChineseColor <- function(
palette = c(
"black", "blue", "cyan", "gray", "green", "purple", "red", "white", "yellow"
), n = 3, alpha = 1, reverse = FALSE) {
palette <- match.arg(palette)
if (alpha > 1L | alpha <= 0L) stop("alpha must be in (0, 1]")
raw_cols <- color_list[[palette]]
func_cols <- colorRamp(raw_cols, space = "Lab", interpolate = "spline")
mat_cols <- func_cols(seq(0L, 1L, length.out = n))
alpha_cols <- rgb(
mat_cols[, 1L], mat_cols[, 2L], mat_cols[, 3L],
alpha = alpha * 255L, maxColorValue = 255L
)
if (reverse) alpha_cols <- rev(alpha_cols)
return(prismatic::color(alpha_cols))
}
pal_ChineseColor("blue")
seq(0L, 1L, length.out = n)
seq(0L, 1L, length.out = 3)
pal_ChineseColor("blue". n = 10)
pal_ChineseColor("blue"m n = 10)
pal_ChineseColor("blue", n = 10)
?func_cols
??func_cols
?colorRamp
mat_cols
mat_cols <- func_cols(seq(0L, 1L, length.out = n))
func_cols <- colorRamp(raw_cols, space = "Lab", interpolate = "spline")
palette <- "red"
raw_cols <- color_list[[palette]]
func_cols <- colorRamp(raw_cols, space = "Lab", interpolate = "spline")
mat_cols <- func_cols(seq(0L, 1L, length.out = n))
n = 5
mat_cols <- func_cols(seq(0L, 1L, length.out = n))
View(mat_cols)
mat_cols <- func_cols(seq(0L, 1L, length.out = n))
raw_cols
alpha = 1
alpha_cols <- rgb(
mat_cols[, 1L], mat_cols[, 2L], mat_cols[, 3L],
alpha = alpha * 255L, maxColorValue = 255L
)
alpha_cols
prismatic::color("alpha_cols")
prismatic::color(alpha_cols)
raw_cols
prismatic::color(head(raw_cols))
prismatic::color(alpha_cols)
colorRampPalette
brewer.pal(9,"Set1")
RColorBrewer::brewer.pal(9,"Set1")
prismatic::color(RColorBrewer::brewer.pal(9,"Set1"))
prismatic::color(colorRampPalette(RColorBrewer::brewer.pal(9,"Set1"))(n))
prismatic::color(colorRampPalette(RColorBrewer::brewer.pal(9,"Set1"))(2))
prismatic::color(colorRampPalette(RColorBrewer::brewer.pal(9,"Set1"))(5))
prismatic::color(colorRampPalette(raw_cols)(5))
prismatic::color(alpha_cols)
prismatic::color(colorRampPalette(raw_cols)(10))
# Different types of Chinese Color palettes grouped by basic colors.
pal_ChineseColor <- function(
palette = c(
"black", "blue", "cyan", "gray", "green", "purple", "red", "white", "yellow"
), n = 3, alpha = 1, reverse = FALSE) {
palette <- match.arg(palette)
if (alpha > 1L | alpha <= 0L) stop("alpha must be in (0, 1]")
raw_cols <- color_list[[palette]]
func_cols <- colorRamp(raw_cols, space = "Lab", interpolate = "spline")
mat_cols <- func_cols(seq(0L, 1L, length.out = n))
alpha_cols <- rgb(
mat_cols[, 1L], mat_cols[, 2L], mat_cols[, 3L],
alpha = alpha * 255L, maxColorValue = 255L
)
if (reverse) alpha_cols <- rev(alpha_cols)
return(prismatic::color(alpha_cols))
}
pal_ChineseColor("red", 10)
prismatic::color(colorRampPalette(raw_cols)(10))
scales::show_col( pal_ChineseColor("red", 10))
names(prismatic::color(colorRampPalette(raw_cols)(10)))
dd <- names(prismatic::color(colorRampPalette(raw_cols)(10)))
dd
dd <- prismatic::color(colorRampPalette(raw_cols)(10))
dd
names(dd) <- 1:10
dd
names(dd)
dd
dd
scales::show_col(dd)
names(color_list)
#' @importFrom prismatic color
#'
#' @author Yu Zhong Peng <\email{mugpeng@foxmail.com}> |
#'
#' @references
#' \url{https://colors.masantu.com/#/}
#'
#' @examples
#' pal_ChineseColor("cyan")
#' pal_ChineseColor("green", n = 30, alpha = 0.6, reverse = TRUE)
pal_ChineseColor <- function(
palette = c(
"blue", "black", "cyan", "gray", "green", "purple", "red", "white", "yellow"
), n = 3, alpha = 1, reverse = FALSE) {
palette <- match.arg(palette)
if (alpha > 1L | alpha <= 0L) stop("alpha must be in (0, 1]")
raw_cols <- color_list[[palette]]
func_cols <- colorRamp(raw_cols, space = "Lab", interpolate = "spline")
mat_cols <- func_cols(seq(0L, 1L, length.out = n))
alpha_cols <- rgb(
mat_cols[, 1L], mat_cols[, 2L], mat_cols[, 3L],
alpha = alpha * 255L, maxColorValue = 255L
)
if (reverse) alpha_cols <- rev(alpha_cols)
return(prismatic::color(alpha_cols))
}
pal_ChineseColor("cyan")
pal_ChineseColor("green", n = 30, alpha = 0.6, reverse = TRUE)
pal_ChineseColor("green", n = 30, alpha = 0.6, reverse = F)
usethis::use_data(color_list, internal = T)
roxygenize("./")
my_packages <- c("tidyverse", "data.table", "readxl",
"rjson"
"devtools", "testthat", "roxygen2")
pacman::p_load(char = my_packages)
my_packages <- c("tidyverse", "data.table", "readxl",
"rjson",
"devtools", "testthat", "roxygen2")
pacman::p_load(char = my_packages)
roxygenize("./")
roxygenize("./")
rm(list = c("pal_ChineseColor"))
roxygenize("./")
?pal_ChineseColor
rm(list = c("pal_ChineseColor"))
roxygenize("./")
?pal_ChineseColor
check("./")
build()
my_packages <- c("tidyverse", "data.table", "readxl",
"rjson",
"devtools", "testthat", "roxygen2")
pacman::p_load(char = my_packages)
tmp <- list()
build()
install.packages("../ggChineseColor_0.1.0.tar.gz")
install.packages("../ggChineseColor_0.1.0.tar.gz", type = "source")
build()
install.packages("../ggChineseColor_0.1.0.tar.gz", type = "source")
devtools::install_local("../ggChineseColor_0.1.0.tar.gz")
ggChineseColor
?ggChineseColor::pal_ChineseColor
pal_ChineseColor("green", n = 30, alpha = 0.6, reverse = TRUE)
ggChineseColor::pal_ChineseColor("green", n = 30, alpha = 0.6, reverse = TRUE)
